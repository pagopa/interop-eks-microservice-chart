{{- if and (eq .Values.techStack "nodejs") (not .Values.moduleType) }}

{{ $root := . }}

{{- $digestSuffix := "" }}
{{- if .Values.deployment.image.digest }}
{{- $digestSuffix = (nospace (cat "@" .Values.deployment.image.digest)) }}
{{- end }}

{{- $imageTag := "" }}
{{- if .Values.deployment.image.tag }}
{{- $imageTag = (nospace (cat ":" .Values.deployment.image.tag)) }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "interop-eks-microservice-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  selector:
    matchLabels:
      {{- include "interop-eks-microservice-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        actorSystemName: {{ .Values.name | quote }}
        {{- include "interop-eks-microservice-chart.labels" . | nindent 8 }}
      annotations:
        digest: {{ .Values.deployment.image.digest | quote }} # Used to force deployment on same image version but different content
    spec:
      serviceAccountName: {{ .Values.name | quote }}
      {{- if and .Values.deployment .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create }}
      initContainers:
        - name: migrate-db
          image: flyway/flyway:8.2.3
          args:
            - migrate
          env:
            {{- if .Values.deployment.flywayInitContainer.envFromConfigmaps }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.envFromConfigmaps -}}
            {{ $configmapAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ index $configmapAddress 0 }}
                  key: {{ index $configmapAddress 1 }}
            {{- end }}
            {{- end }}
            {{- if .Values.deployment.flywayInitContainer.env }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.env }}
            {{- $preprocessedEnvValue := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            - name: "{{ $key }}"
              value: "{{ $preprocessedEnvValue }}"
            {{- end }}
            {{- end }}
            {{- if .Values.deployment.flywayInitContainer.envFromSecrets }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.envFromSecrets -}}
            {{ $secretAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ index $secretAddress 0 }}
                  key: {{ index $secretAddress 1 }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: migrations-files
              mountPath: "/flyway/sql"
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.deployment.image.repositoryPrefix }}/{{ .Values.deployment.image.repositoryName | default .Values.name }}{{ $imageTag }}{{ $digestSuffix }}"
          imagePullPolicy: {{ .Values.deployment.image.imagePullPolicy }}
          {{- if and .Values.deployment .Values.deployment.command }}
          command: {{ toJson .Values.deployment.command }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.args }}
          args: {{ toJson .Values.deployment.args }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.deployment.livenessProbe | nindent 12 }}
          {{- end }} # End livenessProbe
          {{- if and .Values.deployment .Values.deployment.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.deployment.readinessProbe | nindent 12 }}
          {{- end }} # End readinessProbe
          ports:
            {{- if and .Values.service .Values.service.create .Values.service.containerPort }}
            - name: {{ .Values.service.portName }}
              containerPort: {{ .Values.service.containerPort }}
              protocol: {{ .Values.service.containerProtocol | default "TCP" }}
            {{- end }}
            {{- if and .Values.service .Values.service.additionalPorts }}
            {{- range $key, $val := .Values.service.additionalPorts }}
            - name: {{ $val.name }}
              containerPort: {{ $val.containerPort }}
              protocol: {{ $val.protocol }}
            {{- end }}
            {{- end }}
          {{- if .Values.deployment.securityContext }}
          securityContext:
            {{- toYaml .Values.deployment.securityContext | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.configmap }}
            {{- range $key, $val := .Values.configmap }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $root.Values.name | quote }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromFieldRef }}
            {{- range $key, $val := .Values.deployment.envFromFieldRef }}
            - name: {{ $key }}
              valueFrom:
                fieldRef:
                  fieldPath: {{ $val }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.env }}
            {{- range $key, $val := .Values.deployment.env }}
            {{- $preprocessedEnvValue := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            - name: "{{ $key }}"
              value: "{{ $preprocessedEnvValue }}"
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromConfigmaps }}
            {{- range $key, $val := .Values.deployment.envFromConfigmaps -}}
            {{ $configmapAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ index $configmapAddress 0 }}
                  key: {{ index $configmapAddress 1 }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromSecrets }}
            {{- range $key, $val := .Values.deployment.envFromSecrets -}}
            {{ $secretAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ index $secretAddress 0 }}
                  key: {{ index $secretAddress 1 }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          {{- if and .Values.deployment .Values.deployment.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.deployment.volumeMounts | nindent 12 }}
          {{- end }}
      {{- if and .Values.deployment (or .Values.deployment.volumes (and .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create)) }}
      volumes:
        {{- if and .Values.deployment .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create }}
        - name: migrations-files
          projected:
            sources:
              - configMap:
                  name: {{ .Values.deployment.flywayInitContainer.migrationsConfigmap }}
        {{- end }}
        {{ if .Values.deployment.volumes }}
        {{- toYaml .Values.deployment.volumes | nindent 8 }}
        {{- end }}
      {{- end }}
{{- end }}
