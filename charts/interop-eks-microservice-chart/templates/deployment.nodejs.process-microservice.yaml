{{- if and (eq .Values.techStack "nodejs") (eq .Values.moduleType "process-ms") }}

{{ $root := . }}

{{- $digestSuffix := "" }}
{{- if .Values.image.digest }}
{{- $digestSuffix = (nospace (cat "@" .Values.image.digest)) }}
{{- end }}

{{- $imageTag := "" }}
{{- if .Values.image.tag }}
{{- $imageTag = (nospace (cat ":" .Values.image.tag)) }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "interop-eks-microservice-chart.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "interop-eks-microservice-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "interop-eks-microservice-chart.labels" . | nindent 8 }}
      annotations:
        digest: {{ .Values.image.digest | quote }} # Used to force deployment on same image version but different content
    spec:
      serviceAccountName: {{ .Values.name | quote }}
      {{- if and .Values.deployment .Values.deployment.flyway .Values.deployment.flyway.enableFlywayInitContainer }}
      initContainers:
        - name: migrate-db
          image: flyway/flyway:8.2.3
          args:
            - migrate
          envFrom:
            - configMapRef:
                name: {{ .Values.name | quote }}
          env:
            {{- if .Values.deployment.flyway.commonsDbConfigmapName }}
            {{- $configmap := (lookup "v1" "ConfigMap" .Values.namespace .Values.deployment.flyway.commonsDbConfigmapName) }}
            {{- if $configmap }}
            {{- $POSTGRES_HOST := get $configmap.data "EVENTSTORE_DB_HOST" }}
            {{- $POSTGRES_PORT := get $configmap.data "EVENTSTORE_DB_PORT" }}
            {{- $POSTGRES_DB := get $configmap.data "EVENTSTORE_DB_NAME" }}
            {{- if and $POSTGRES_HOST $POSTGRES_PORT $POSTGRES_DB }}
            - name: FLYWAY_URL
              value: jdbc:postgresql://{{ $POSTGRES_HOST }}:{{ $POSTGRES_PORT }}/{{ $POSTGRES_DB }}
            {{- end }}
            {{- end }}
            {{- end }}
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.deployment.flyway.commonsDbConfigmapName }}
                  key: EVENTSTORE_DB_NAME
            - name: FLYWAY_USER
              valueFrom:
                secretKeyRef:
                  name: event-store
                  key: POSTGRES_USR
            - name: FLYWAY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: event-store
                  key: POSTGRES_PSW
            - name: FLYWAY_SCHEMAS
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.name | quote }}
                  key: EVENTSTORE_DB_SCHEMA
            - name: FLYWAY_PLACEHOLDERS_APPLICATIONSCHEMA
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.name | quote }}
                  key: EVENTSTORE_DB_SCHEMA
          volumeMounts:
            - name: migrations-files
              mountPath: "/flyway/sql"
          resources:
            requests:
              memory: "64Mi"
              cpu: "10m"
            limits:
              memory: "1Gi"
              cpu: "500m"
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.image.repositoryPrefix }}/{{ .Values.image.repositoryName | default .Values.name }}{{ $imageTag }}{{ $digestSuffix }}"
          imagePullPolicy: {{ .Values.image.imagePullPolicy }}
          {{- if and .Values.deployment .Values.deployment.command }}
          command: {{ .Values.deployment.command }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.args }}
          args: {{ .Values.deployment.args }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.enableLivenessProbe }}
          livenessProbe:
            httpGet:
              path: "/status"
              port: http
            periodSeconds: 5
            initialDelaySeconds: 15
          {{- end }} # End enableLivenessProbe
          {{- if and .Values.deployment .Values.deployment.enableReadinessProbe }}
          readinessProbe:
            httpGet:
              path: "/status"
              port: http
            periodSeconds: 5
            initialDelaySeconds: 15
          {{- end }} # End enableReadinessProbe
          ports:
            {{- if and .Values.service .Values.service.containerPort }}
            - name: {{ .Values.service.portName | default "http" }}
              containerPort: {{ .Values.service.containerPort }}
              protocol: {{ .Values.service.containerProtocol | default "TCP" }}
            {{- end }}
            {{- if and .Values.service .Values.service.additionalPorts }}
            {{- range $key, $val := .Values.service.additionalPorts }}
            - name: {{ $val.name }}
              containerPort: {{ $val.containerPort }}
              protocol: {{ $val.protocol }}
            {{- end }}
            {{- end }}
          env:
            - name: PORT
              value: {{ .Values.service.containerPort | quote}}
            - name: HOST
              value: {{ .Values.deployment.host | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.deployment.logLevel | quote}}
            - name: EVENTSTORE_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: common-event-store
                  key: EVENTSTORE_DB_HOST
            - name: EVENTSTORE_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: common-event-store
                  key: EVENTSTORE_DB_NAME
            - name: EVENTSTORE_DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: common-event-store
                  key: EVENTSTORE_DB_PORT
            - name: EVENTSTORE_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: event-store
                  key: POSTGRES_USR
            - name: EVENTSTORE_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: event-store
                  key: POSTGRES_PSW
            - name: EVENTSTORE_DB_USE_SSL
              value: "true"
            - name: READMODEL_DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: common-read-model
                  key: READMODEL_DB_HOST
            - name: READMODEL_DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: common-read-model
                  key: READMODEL_DB_NAME
            - name: READMODEL_DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: common-read-model
                  key: READMODEL_DB_PORT
            - name: READMODEL_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: read-model
                  key: READONLY_USR
            - name: READMODEL_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: read-model
                  key: READONLY_PSW
            {{- if .Values.configmap }}
            {{- range $key, $val := .Values.configmap }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $root.Values.name | quote }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFieldRef }}
            {{- range $key, $val := .Values.deployment.envFieldRef }}
            - name: {{ $key }}
              valueFrom:
                fieldRef:
                  fieldPath: {{ $val }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.env }}
            {{- range $key, $val := .Values.deployment.env }}
            - name: "{{ $key }}"
              value: "{{ $val }}"
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromConfigmaps }}
            {{- range $key, $val := .Values.deployment.envFromConfigmaps -}}
            {{ $configmapAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ index $configmapAddress 0 }}
                  key: {{ index $configmapAddress 1 }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromSecrets }}
            {{- range $key, $val := .Values.deployment.envFromSecrets -}}
            {{ $secretAddress := mustRegexSplit "\\." $val 2 }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ index $secretAddress 0 }}
                  key: {{ index $secretAddress 1 }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if and .Values.deployment .Values.deployment.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.deployment.volumeMounts | nindent 12 }}
          {{- end }}
      {{- if and .Values.deployment .Values.deployment.volumes }}
      volumes:
        {{- toYaml .Values.deployment.volumes | nindent 8 }}
      {{- end }}

{{- end }}
