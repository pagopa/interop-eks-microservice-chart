{{- if and (or (eq .Values.techStack "nodejs") (eq .Values.techStack "scala")) (not .Values.moduleType) }}

{{ $root := . }}

{{- $digestSuffix := "" }}
{{- if .Values.deployment.image.digest }}
{{- $digestSuffix = (nospace (cat "@" .Values.deployment.image.digest)) }}
{{- end }}

{{- $imageTag := "" }}
{{- if .Values.deployment.image.tag }}
{{- $imageTag = (nospace (cat ":" .Values.deployment.image.tag)) }}
{{- end }}

{{- if and (not $imageTag) (not $digestSuffix)}}
{{ fail "One of deployment.image.tag and deployment.image.digest must be defined." }}
{{- end }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "interop-eks-microservice-chart.labels" . | nindent 4 }}
    {{- with .Values.deployment.metadata.labels }}
    {{- range $key, $val := . -}}
    {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
    {{ $key }}: {{ $renderedVal }}
    {{- end }}
    {{- end }}
  annotations:
    {{- with .Values.deployment.metadata.annotations }}
    {{- range $key, $val := . -}}
    {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
    {{ $key }}: {{ $renderedVal }}
    {{- end }}
    {{- end }}
spec:
  replicas: {{ .Values.deployment.replicas }}
  {{- if and .Values.deployment .Values.deployment.strategy }}
  strategy:
    type: {{ .Values.deployment.strategy.type }}
    {{- if eq .Values.deployment.strategy.type "RollingUpdate"}}
    rollingUpdate:
      {{- toYaml .Values.deployment.strategy.rollingUpdate | nindent 6 }}
    {{- end }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "interop-eks-microservice-chart.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "interop-eks-microservice-chart.labels" . | nindent 8 }}
        {{- with .Values.deployment.podTemplateMetadata.labels }}
        {{- range $key, $val := . -}}
        {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
        {{ $key }}: {{ $renderedVal }}
        {{- end }}
        {{- end }}
      annotations:
        {{- if .Values.deployment.image.digest }}
        digest: {{ .Values.deployment.image.digest | quote }} # Used to force deployment on same image version but different content
        {{- end }}
        {{- with .Values.deployment.podTemplateMetadata.annotations }}
        {{- range $key, $val := . -}}
        {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
        {{ $key }}: {{ $renderedVal }}
        {{- end }}
        {{- end }}

        {{- include "interop-eks-microservice-chart.generateRolloutAnnotations" . | nindent 8 }}
    spec:
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ .Values.name | quote }}
      {{- end }}
      {{- if and .Values.deployment .Values.deployment.preStopHookGracefulTermination .Values.deployment.preStopHookGracefulTermination.create }}
      terminationGracePeriodSeconds: {{add1 .Values.deployment.preStopHookGracefulTermination.durationSeconds }}
      {{- end }}
      {{- if and .Values.deployment .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create }}
      initContainers:
        - name: migrate-db
          image: flyway/flyway:{{ .Values.deployment.flywayInitContainer.version}}
          {{- if .Values.deployment.flywayInitContainer.downloadRedshiftDriver }}
          command:
            - /bin/sh
            - -c
            - |
              echo "Downloading Redshift JDBC driver..."
              curl -L -o /flyway/drivers/RedshiftJDBC.jar https://s3.amazonaws.com/redshift-downloads/drivers/jdbc/2.1.0.32/redshift-jdbc42-2.1.0.32.jar
              echo "Starting Flyway migration..."
              flyway migrate
          {{- else }}
          args:
            - migrate
          {{- end }}
          env:
            {{- if .Values.deployment.flywayInitContainer.envFromConfigmaps }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.envFromConfigmaps -}}
            {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            {{- $configmapAddress := mustRegexSplit "\\." $renderedVal 2 }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ index $configmapAddress 0 }}
                  key: {{ index $configmapAddress 1 }}
            {{- end }}
            {{- end }}
            {{- if .Values.deployment.flywayInitContainer.env }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.env }}
            {{- $preprocessedEnvValue := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            - name: "{{ $key }}"
              value: "{{ $preprocessedEnvValue }}"
            {{- end }}
            {{- end }}
            {{- if .Values.deployment.flywayInitContainer.envFromSecrets }}
            {{- range $key, $val := .Values.deployment.flywayInitContainer.envFromSecrets -}}
            {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            {{- $secretAddress := mustRegexSplit "\\." $renderedVal 2 }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ index $secretAddress 0 }}
                  key: {{ index $secretAddress 1 }}
            {{- end }}
            {{- end }}
          volumeMounts:
            - name: migrations-files
              mountPath: "/flyway/sql"
          {{- if .Values.deployment.flywayInitContainer.resources }}
          resources:
            {{- toYaml .Values.deployment.flywayInitContainer.resources | nindent 12 }}
          {{- else }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          {{- end}}
      {{- end }}
      containers:
        - name: {{ .Values.name }}
          image: "{{ .Values.deployment.image.repositoryPrefix }}/{{ .Values.deployment.image.repositoryName | default .Values.name }}{{ $imageTag }}{{ $digestSuffix }}"
          imagePullPolicy: {{ .Values.deployment.image.imagePullPolicy }}
          {{- if and .Values.deployment .Values.deployment.command }}
          command: {{ toJson .Values.deployment.command }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.args }}
          args: {{ toJson .Values.deployment.args }}
          {{- end }}
          {{- if and .Values.deployment .Values.deployment.livenessProbe }}
          livenessProbe:
            {{- toYaml .Values.deployment.livenessProbe | nindent 12 }}
          {{- end }} {{/* End of livenessProbe section */}}
          {{- if and .Values.deployment .Values.deployment.readinessProbe }}
          readinessProbe:
            {{- toYaml .Values.deployment.readinessProbe | nindent 12 }}
          {{- end }} {{/* End of readinessProbe section */}}
          {{- if and .Values.deployment.preStopHookGracefulTermination .Values.deployment.preStopHookGracefulTermination.create }}
          lifecycle:
            preStop:
              exec:
                command:
                  - /bin/sh
                  - -c
                  - {{ printf "sleep %d; exit 0;" (int .Values.deployment.preStopHookGracefulTermination.durationSeconds)  }}
          {{- end }}
          ports:
            {{- if and .Values.service .Values.service.create .Values.service.containerPort }}
            - name: {{ .Values.service.portName }}
              containerPort: {{ .Values.service.containerPort }}
              protocol: {{ .Values.service.containerProtocol | default "TCP" }}
            {{- end }}
            {{- if and .Values.service .Values.service.additionalPorts }}
            {{- range $key, $val := .Values.service.additionalPorts }}
            - name: {{ $val.name }}
              containerPort: {{ $val.containerPort }}
              protocol: {{ $val.protocol }}
            {{- end }}
            {{- end }}
          {{- if .Values.deployment.securityContext }}
          securityContext:
            {{- toYaml .Values.deployment.securityContext | nindent 12 }}
          {{- end }}
          env:
            {{- if .Values.configmap }}
            {{- range $key, $val := .Values.configmap }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $root.Values.name | quote }}
                  key: {{ $key }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromFieldRef }}
            {{- range $key, $val := .Values.deployment.envFromFieldRef }}
            - name: {{ $key }}
              valueFrom:
                fieldRef:
                  fieldPath: {{ $val }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.env }}
            {{- range $key, $val := .Values.deployment.env }}
            {{- $preprocessedEnvValue := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            - name: "{{ $key }}"
              value: "{{ $preprocessedEnvValue }}"
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromConfigmaps }}
            {{- range $key, $val := .Values.deployment.envFromConfigmaps -}}
            {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            {{- $configmapAddress := mustRegexSplit "\\." $renderedVal 2 }}
            - name: {{ $key }}
              valueFrom:
                configMapKeyRef:
                  name: {{ index $configmapAddress 0 }}
                  key: {{ index $configmapAddress 1 }}
            {{- end }}
            {{- end }}
            {{- if and .Values.deployment .Values.deployment.envFromSecrets }}
            {{- range $key, $val := .Values.deployment.envFromSecrets -}}
            {{- $renderedVal := include "interop-eks-microservice-chart.render-template" (dict "value" $val "context" $) }}
            {{- $secretAddress := mustRegexSplit "\\." $renderedVal 2 }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ index $secretAddress 0 }}
                  key: {{ index $secretAddress 1 }}
            {{- end }}
            {{- end }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          {{- if and .Values.deployment .Values.deployment.volumeMounts }}
          volumeMounts:
            {{- toYaml .Values.deployment.volumeMounts | nindent 12 }}
          {{- end }}
      {{- if and .Values.deployment (or .Values.deployment.volumes (and .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create)) }}
      volumes:
        {{- if and .Values.deployment .Values.deployment.flywayInitContainer .Values.deployment.flywayInitContainer.create }}
        - name: migrations-files
          projected:
            sources:
              - configMap:
                  name: {{ .Values.deployment.flywayInitContainer.migrationsConfigmap }}
        {{- end }}
        {{ if .Values.deployment.volumes }}
        {{- toYaml .Values.deployment.volumes | nindent 8 }}
        {{- end }}
      {{- end }}
{{- end }}
