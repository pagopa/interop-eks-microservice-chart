{{- if and .Values.ingress .Values.ingress.create .Values.service.targetGroupArn }}
  {{ fail "ingress.create and service.targetGroupArn cannot both be configured; please define just one." }}
{{- end }}

{{- if .Values.ingress.create -}}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.name }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "interop-eks-microservice-chart.labels" . | nindent 4 }}
  annotations:
    alb.ingress.kubernetes.io/scheme: "internal"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/group.name: {{ .Values.ingress.groupName | quote }}
    alb.ingress.kubernetes.io/load-balancer-attributes: "routing.http.preserve_host_header.enabled=true"
    {{- if not (kindIs "invalid" .Values.ingress.groupOrder) }} #GroupOrder è un intero e può assumere valore 0; necessario utilizzare sintassi "kindOf" altrimenti la condizione della if è valutata "false" nel caso in cui si voglia valorizzare groupOrder con 0 
    alb.ingress.kubernetes.io/group.order: {{ .Values.ingress.groupOrder }}
    {{- end }}
spec:
  ingressClassName: "alb"
  rules:
    {{- if .Values.ingress.applicationPath }}
    - http:
        paths:
          - path: {{ .Values.ingress.applicationPath | trimSuffix "/" }}
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.name }}
                port:
                  number: {{ .Values.service.containerPort }}
    {{- if .Values.ingress.host }}
      host: {{ .Values.ingress.host | quote }}
    {{- end }}
    {{- end }}
{{- end }}
