# Default values for interop-eks-microservice-chart.

# -- Name of the service that will be deployed on K8s cluster
name:

# -- Namespace hosting the service that will be deployed on K8s cluster
namespace:

# -- (enum) Defines the technology used to develop the container. The following values are allowed: [ "nodejs", "frontend"]
techStack:

# -- (bool) Enable Resources lookup on K8s cluster to resolve referenced values
enableLookup: true

serviceAccount:
  # -- (bool) Enable ServiceAccount creation
  create: true
  # -- (string) ServiceAccount roleARN
  roleArn:

service:
  # -- (object) ALB healthcheck config
  albHealthcheck:
    path:
    port:
    successCodes:
    protocol:
  # -- Enable K8s Service deployment generation
  create: false
  # -- (enum) K8s Service type, allowed values: [ "ClusterIP", "NodePort" ]
  type: "ClusterIP"
  monitoringPort: 9095
  managementPort: 8558
  # -- (string) Service port name
  portName:
  containerPort:
  targetPort:
  # -- Enable container monitoring port
  enableMonitoring: true
  # -- Enable container management port
  enableManagement: true

ingress:
  # -- Enable K8s Ingress deployment generation
  create: false
  # -- ingress.create and service.targetGroupArn must be mutually exclusive.
  className: alb
  groupName: "interop-be"

deployment:
  # -- (bool) Enable annotation generation for referenced configmaps and secrets
  enableRolloutAnnotations: false
  metadata:
    # -- (object) Additional annotations to apply to Deployment metadata
    annotations:
    # -- (object) Additional labels to apply to Deployment metadata
    labels:
  podTemplateMetadata:
    # -- (object) Additional annotations to apply to Pod `spec.template.metadata`
    annotations:
    # -- (object) Additional labels to apply to Pod `spec.template.metadata`
    labels:
  # -- (int) Number of desired replicas for the service being deployed
  replicas:
  # -- (object) Rollout strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0%
  # -- (object) Pod securityContext, applied to main container
  securityContext:
    allowPrivilegeEscalation: false
  # -- (object) Microservice image configuration
  image:
    # -- (string) Image pull policy
    imagePullPolicy: Always
    # -- (string) Image repository
    repositoryPrefix:
    # -- (string) Alternative image name
    repositoryName:
    # -- (string) Image tag
    tag:
    # -- (string) Image digest
    digest:
  # -- (object) K8s container resources requests and limits
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  # -- (object) List of environment variables for a container, specifying a value directly for each named variable
  env:
  # -- (object) List of environment variables for a container, specifying a key from a Configmap for each named variable (k8s equivalent of envFrom.configMapRef)
  envFromConfigmaps: {}
  # -- (object) List of environment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of envFrom.secretRef)
  envFromSecrets: {}
  # -- (object) List of pod fields used as values for environment variablesenvironment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of env.valueFrom.fieldRef.fieldPath)
  envFromFieldRef: {}
  preStopHookGracefulTermination:
    # -- (bool) Enable preStop hook for graceful termination
    create: true
    # -- (int) Duration in seconds for the preStop hook to complete
    durationSeconds: 30
  flywayInitContainer:
    create: false
    # -- (string) Flyway container image version
    version: "8.2.3"
    # -- (bool) Enable Flyway to download Redshift jdbc driver
    downloadRedshiftDriver: false
    # -- Configmap with migrations
    migrationsConfigmap:
    # -- (object) List of environment variables for a container, specifying a value directly for each named variable
    env: {}
    # -- (object) List of environment variables for a container, specifying a key from a Configmap for each named variable (k8s equivalent of envFrom.configMapRef)
    envFromConfigmaps: {}
    # -- (object) List of environment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of envFrom.secretRef)
    envFromSecrets: {}
    # -- (object) List of pod fields used as values for environment variablesenvironment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of env.valueFrom.fieldRef.fieldPath)
    envFromFieldRef: {}

autoscaling:
  # -- KEDA autoscaling configuration
  keda:
    # -- (bool) Enable KEDA autoscaling
    create: false
    # -- (int) minimum replica count
    minReplicaCount:
    # -- (int) maximum replica count
    maxReplicaCount:
    # -- (int) metrics polling interval in seconds
    pollingInterval:
    # -- (int) cooldown period in seconds
    cooldownPeriod:
    # -- (list) triggers configuration, refer to https://keda.sh/docs/2.17/scalers/
    triggers:
