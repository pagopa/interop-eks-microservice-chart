# Default values for interop-eks-microservice-chart.

# -- Name of the service that will be deployed on K8s cluster
name:

# -- Namespace hosting the service that will be deployed on K8s cluster
namespace:

# -- (enum) Defines the technology used to develop the container. The following values are allowed: [ "nodejs", "frontend"]
techStack: 

# -- ServiceAccount roleARN
serviceAccount:
  # -- (string) ServiceAccount roleARN
  roleArn:

service:
  # -- Service annotations
  healthcheck:
    path:
    port:
    successCodes:
    protocol:
  # -- Enable K8s Service deployment generation
  create: false
  # -- (enum) K8s Service type, allowed values: [ "ClusterIP", "NodePort" ]
  type: "ClusterIP"
  monitoringPort: 9095
  managementPort: 8558
  # -- (string) Service port name 
  portName: 
  containerPort:
  targetPort: 
  # -- Enable container monitoring port
  enableMonitoring: true
  # -- Enable container management port
  enableManagement: true

ingress:
  # -- Enable K8s Ingress deployment generation
  create: false
  # -- ingress.create and service.targetGroupArn must be mutually exclusive.
  className: alb
  groupName: "interop-be"
 

deployment:
  # -- (int) Number of desired replicas for the service being deployed
  replicas: 
  # -- (object) Pod securityContext, applied to main container
  securityContext:
    allowPrivilegeEscalation: false
  # -- (object) Microservice image configuration
  image:
    # -- (string) Image pull policy
    imagePullPolicy: Always
    # -- (string) Image repository
    repositoryPrefix:
    # -- (string) Alternative image name
    repositoryName:
    # -- (string) Image tag
    tag:
    # -- (string) Image digest
    digest:
  # -- (object)  K8s container resources requests and limits
  resources:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
  # -- (object) List of environment variables for a container, specifying a value directly for each named variable
  env: 
  # -- (object) List of environment variables for a container, specifying a key from a Configmap for each named variable (k8s equivalent of envFrom.configMapRef)
  envFromConfigmaps: 
  # -- (object) List of environment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of envFrom.secretRef)
  envFromSecrets: 
  # -- (object) List of pod fields used as values for environment variablesenvironment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of env.valueFrom.fieldRef.fieldPath)
  envFromFieldRef: 
  flywayInitContainer:
    create: false
    # -- (string) Flyway container image version
    version: "8.2.3"
    # -- (bool) Enable Flyway to download Redshift jdbc driver
    downloadRedshiftDriver: false
    # -- Configmap with migrations
    migrationsConfigmap:
    # -- (object) List of environment variables for a container, specifying a value directly for each named variable
    env: 
    # -- (object) List of environment variables for a container, specifying a key from a Configmap for each named variable (k8s equivalent of envFrom.configMapRef)
    envFromConfigmaps: 
    # -- (object) List of environment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of envFrom.secretRef)
    envFromSecrets: 
    # -- (object) List of pod fields used as values for environment variablesenvironment variables for a container, specifying a key from a Secret for each named variable (k8s equivalent of env.valueFrom.fieldRef.fieldPath)
    envFromFieldRef: 

# -- Horizontal Pod Autoscaling configuration
autoscaling:
  horizontal:
    # -- Enable horizontal pod autoscaling
    create: false
    # -- Enable KEDA
  keda:
    create: true
    scaledObject:
      # -- (int) Minimum number of replicas for the service. Replace with the desired minimum value.
      minReplicaCount:
      # -- (int) Maximum number of replicas for the service. Replace with the desired maximum value.
      maxReplicaCount:
      # -- (int) Polling interval (in seconds) for checking metrics.
      pollingInterval:
      # -- (int) Stabilization window (in seconds) for scaling down to avoid rapid reductions.
      scaleDownStabilizationWindowSeconds:
      # -- (int) Stabilization window (in seconds) for scaling up to avoid rapid increases.
      scaleUpStabilizationWindowSeconds:
      # -- (list) List of triggers for configuring autoscaling.
      triggers:
          # -- (string) Type of trigger, e.g. "aws-cloudwatch".
        - type: aws-cloudwatch
          create: false
          metadata:
            # -- (string) AWS region from which to collect metrics.
            awsRegion:
            # -- (string) Name of the metric dimension.
            dimensionName:
            # -- (string) Value of the metric dimension.
            dimensionValue:
            # -- (string) Identifier of the operator owner, typically "operator".
            identityOwner:
            # -- (string) Set to 'true' to ignore null metric values.
            ignoreNullValues:
            # -- (string) Metric collection time (in seconds).
            metricCollectionTime:
            # -- (string) CloudWatch metric name.
            metricName:
            # -- (string) Metric statistic, e.g. "Sum".
            metricStat:
            # -- (string) Statistic period (in seconds) for the metric.
            metricStatPeriod:
            # -- (string) Metric type, e.g. "AverageValue".
            metricType:
            # -- (string) Minimum metric value for the trigger.
            minMetricValue:
            # -- (string) AWS namespace for the metric.
            namespace:
            # -- (string) Target metric value for triggering scaling.
            targetMetricValue:
          # -- (bool) Enable cached metrics if set to true.
          useCachedMetrics:
        # -- (string) Trigger type, "cpu" for CPU usage.
        - type: cpu 
          create: false  
          # -- (string) Specifies the CPU metric type, e.g. "Utilization" or "AverageValue".
          metricType:
          metadata:
            # -- (string) Target CPU utilization value (percentage).
            value:
        # -- (string) Trigger type, "memory" for memory usage.    
        - type: memory
          create: false 
          # -- (string) Specifies the memory metric type, "Utilization" or "AverageValue".
          metricType:
          metadata:
            # -- (string) Target memory utilization value (percentage).
            value:
  